# プログラム仕様書

## 1. フォルダ構造の解析

以下はプロジェクトのフォルダ構造です。

```
bigquery_gsc/
├── .gitignore
├── .req_hash
├── README.md
├── config/
│   ├── boxwood-dynamo-384411-6dec80faabfc.json
│   ├── gcp4-441506-56861cb0311a.json
│   ├── gcp4-441506-affe38a981c3.json
│   ├── secrets.env
│   └── settings.ini
├── data/
├── docs/
│   ├── .gitkeep
│   ├── detail_spec.txt
│   ├── merge.txt
│   └── requirements_spec.txt
├── logs/
│   ├── .gitkeep
│   └── app_20241207.log.2024-12-07
├── requirements.txt
├── run.bat
├── run_dev.bat
├── spec_tools/
│   ├── generate_detailed_spec.py
│   ├── generate_spec.py
│   ├── logs/
│   │   └── .gitkeep
│   ├── merge_files.py
│   ├── prompt/
│   │   ├── README_tmp.md
│   │   ├── prompt_generate_detailed_spec.txt
│   │   └── prompt_requirements_spec.txt
│   └── utils.py
├── spec_tools_run.bat
├── src/
│   ├── __init__.py
│   ├── main.py
│   ├── modules/
│   │   ├── __init__.py
│   │   ├── date_initializer.py
│   │   ├── gsc_fetcher.py
│   │   └── gsc_handler.py
│   └── utils/
│       ├── __init__.py
│       ├── date_utils.py
│       ├── environment.py
│       ├── helpers.py
│       ├── logging_config.py
│       └── url_utils.py
└── tests/
    ├── __init__.py
    └── test_url_utils.py
```

- **ファイルタイプ**
  - Pythonコード: 16ファイル
  - 設定ファイル: 5ファイル
  - その他のファイル: 3ファイル

- **集計**
  - ファイル数: 24
  - フォルダ数: 9

## 2. ファイルごとの役割と依存関係

| ファイル名                          | 役割                                                                 | 依存関係                                       |
|------------------------------------|----------------------------------------------------------------------|------------------------------------------------|
| `generate_detailed_spec.py`        | 仕様書の詳細を生成しファイルに保存。                                   | `utils.py`, `OpenAIConfig`, `dotenv`             |
| `generate_spec.py`                 | 仕様書を生成しファイルに保存。                                        | `utils.py`, `OpenAIConfig`, `dotenv`             |
| `merge_files.py`                   | 複数のPythonファイルをマージし、出力する。                             | `utils.py`, `argparse`, `logging`                |
| `utils.py`                         | 共通ユーティリティ関数を提供。                                         | `os`, `logging`, `anytree`, `OpenAI`            |
| `main.py`                          | プロジェクトのエントリーポイント。                                     | `EnvironmentUtils`, `logging_config`, `gsc_handler` |
| `date_initializer.py`              | 日付の初期化と範囲設定を行う。                                         | `datetime`, `bigquery`, `date_utils`            |
| `gsc_fetcher.py`                   | Google Search Consoleからデータを取得し、BigQueryに挿入。              | `service_account`, `bigquery`, `logging_config` |
| `gsc_handler.py`                   | GSCデータの処理とBigQueryへの保存を管理。                              | `gsc_fetcher`, `date_initializer`, `logging_config`|
| `date_utils.py`                    | 日付関連のユーティリティ関数を提供。                                   | `datetime`, `pytz`                              |
| `environment.py`                   | 環境変数と設定ファイルからのデータ取得を管理。                         | `os`, `Path`, `dotenv`, `configparser`          |
| `logging_config.py`                | ロギングの設定を管理。                                                 | `logging`, `Path`                               |
| `url_utils.py`                     | URLの正規化とデータの集計を行う。                                      | `urlparse`, `collections`                       |

## 3. クラス定義の詳細

### `SpecificationGenerator` (spec_tools/generate_detailed_spec.py)

- **概要**: 仕様書生成を管理します。
- **属性**
  - `ai_config`: `OpenAIConfig` - AI関連の設定を管理。
  - `source_dir`: `str` - ソースディレクトリのパス。
  - `document_dir`: `str` - ドキュメントディレクトリのパス。
  - `prompt_file`: `str` - プロンプトファイルのパス。

- **メソッド**
  - `__init__`: 設定を読み込む。
    - **詳細仕様**: OpenAIConfigを初期化し、ディレクトリの設定を行う。
  - `generate`: 仕様書を生成し、ファイルに保存。
    - **詳細仕様**: merge.txtとプロンプトファイルを読み込み、AI応答を取得し、ファイルに書き込む。
  - `_read_merge_file`: merge.txtの内容を読み込む。
    - **詳細仕様**: ファイルのパスを確認し、内容を安全に読み込む。
  - `_read_prompt_file`: プロンプトファイルを読み込む。
    - **詳細仕様**: プロンプトファイルの内容を安全に読み込む。

- **依存関係**: `OpenAIConfig`, `utils`, `dotenv`

### `PythonFileMerger` (spec_tools/merge_files.py)

- **概要**: Pythonファイルをマージする。
- **属性**
  - `logger`: `Optional[logging.Logger]` - ロガーのインスタンス。
  - `settings`: `dict` - 設定情報。
  - `project_dir`: `str` - プロジェクトディレクトリ。
  - `output_dir`: `str` - 出力ディレクトリ。
  - `output_filename`: `str` - 出力ファイル名。
  - `exclude_dirs`: `List[str]` - 除外するディレクトリ。
  - `exclude_files`: `List[str]` - 除外するファイルパターン。

- **メソッド**
  - `__init__`: マージャーを初期化。
    - **詳細仕様**: 設定を読み込み、ディレクトリとファイルのパスを設定する。
  - `_generate_tree_structure`: ディレクトリ構造を生成。
    - **詳細仕様**: anytreeを使用してディレクトリ構造を生成する。
  - `_collect_python_files`: Pythonファイルを収集。
    - **詳細仕様**: 指定ディレクトリからPythonファイルを収集する。
  - `_merge_files_content`: ファイル内容をマージ。
    - **詳細仕様**: ファイルの内容を読み込み、マージする。
  - `_write_output`: マージされた内容をファイルに書き込む。
    - **詳細仕様**: マージされた内容を指定されたファイルに書き込む。
  - `process`: ファイルマージ処理を実行。
    - **詳細仕様**: ファイルを収集し、マージし、出力する。

- **依存関係**: `utils`, `logging`

## 4. 各ファイル内の関数リスト

- **spec_tools/generate_detailed_spec.py**
  - `generate_detailed_specification`: 詳細仕様書を生成。

- **spec_tools/generate_spec.py**
  - `generate_specification`: 仕様書を生成。

- **spec_tools/merge_files.py**
  - `merge_py_files`: マージ処理のエントリーポイント。
  - `parse_arguments`: コマンドライン引数を解析。
  - `main`: マージプロセスを実行。

- **src/main.py**
  - `setup_configurations`: 設定ファイルと機密情報をロード。
  - `main`: メイン処理。

- **src/modules/date_initializer.py**
  - `initialize_date_range_past_year`: 過去1年間の日付を生成。
  - `get_next_date_range`: 次のデータ範囲を決定。
  - `get_date_range_for_fetch`: 日付範囲を設定。

- **src/modules/gsc_fetcher.py**
  - `fetch_records`: GSCデータをフェッチ。
  - `insert_to_bigquery`: GSCデータをBigQueryに挿入。
  - `fetch_and_insert_gsc_data`: GSCデータを取得し、BigQueryに挿入。
  - `_handle_error`: エラーハンドリング。
  - `_get_bigquery_credentials`: BigQuery用の認証情報を取得。
  - `_bq_schema`: BigQueryテーブルスキーマを定義。

- **src/modules/gsc_handler.py**
  - `process_gsc_data`: GSCデータを取得し、BigQueryに保存。
  - `save_processing_position`: 処理位置を保存。
  - `get_last_processed_position`: 最後に処理したポジションを取得。

- **src/utils/date_utils.py**
  - `get_current_jst_datetime`: 現在のJSTを取得。
  - `format_datetime_jst`: JSTをフォーマット。

- **src/utils/environment.py**
  - `set_project_root`: プロジェクトのルートディレクトリを設定。
  - `get_project_root`: プロジェクトのルートディレクトリを取得。
  - `load_env`: 環境変数をロード。
  - `get_env_var`: 環境変数を取得。
  - `get_config_file`: 設定ファイルのパスを取得。
  - `get_config_value`: 設定値を取得。
  - `resolve_path`: パスを絶対パスに変換。
  - `get_service_account_file`: サービスアカウントファイルのパスを取得。
  - `get_environment`: 環境を取得。
  - `get_openai_api_key`: OpenAI APIキーを取得。
  - `get_openai_model`: OpenAIモデル名を取得。

- **src/utils/logging_config.py**
  - `setup_logging`: ロギング設定をセットアップ。
  - `get_logger`: 名前付きロガーを取得。

- **src/utils/url_utils.py**
  - `normalize_url`: URLを正規化。
  - `aggregate_records`: レコードを集計。

## 5. 関数ごとの詳細仕様

### `generate_detailed_specification`

- **概要**: 詳細仕様書を生成する。
- **入力**: なし
- **出力**: なし
- **内部処理**:
  1. `SpecificationGenerator`のインスタンスを生成。
  2. `generate`メソッドを呼び出し、仕様書を生成。
  3. 生成された仕様書の出力をログに記録。
- **依存関係**: `SpecificationGenerator`

### `generate_specification`

- **概要**: 仕様書を生成する。
- **入力**: なし
- **出力**: なし
- **内部処理**:
  1. `SpecificationGenerator`のインスタンスを生成。
  2. `generate`メソッドを呼び出し、仕様書を生成。
  3. 生成された仕様書の出力をログに記録。
- **依存関係**: `SpecificationGenerator`

### `merge_py_files`

- **概要**: Pythonファイルのマージ処理を行う。
- **入力**:
  - `settings_path`: `str` - 設定ファイルのパス。
  - `logger`: `Optional[logging.Logger]` - ロガーのインスタンス。
- **出力**: `Optional[str]` - 出力ファイルのパス。
- **内部処理**:
  1. `PythonFileMerger`のインスタンスを生成。
  2. `process`メソッドを呼び出し、マージを実行。
  3. マージ結果をログに記録。
- **依存関係**: `PythonFileMerger`

### `parse_arguments`

- **概要**: コマンドライン引数を解析する。
- **入力**: なし
- **出力**: `argparse.Namespace` - 解析された引数。
- **内部処理**:
  1. `argparse.ArgumentParser`を使用して引数を解析。
  2. 解析結果を返す。
- **依存関係**: `argparse`

### `main` (spec_tools/merge_files.py)

- **概要**: マージプロセスを実行する。
- **入力**: なし
- **出力**: なし
- **内部処理**:
  1. コマンドライン引数を解析。
  2. ロガーを設定。
  3. `merge_py_files`を呼び出し、出力結果をログに記録。
- **依存関係**: `merge_py_files`

### `setup_configurations`

- **概要**: 設定ファイルと機密情報をロードする。
- **入力**: なし
- **出力**: `tuple` - 設定値、機密情報、環境。
- **内部処理**:
  1. 環境変数をロード。
  2. `settings.ini`から値を取得。
  3. `secrets.env`から機密情報を取得。
  4. 現在の環境を取得。
- **依存関係**: `EnvironmentUtils`

### `main` (src/main.py)

- **概要**: プロジェクトのメイン処理を実行する。
- **入力**: なし
- **出力**: なし
- **内部処理**:
  1. 設定値と機密情報をロード。
  2. GSCデータ取得処理を呼び出す。
- **依存関係**: `setup_configurations`, `process_gsc_data`

### `initialize_date_range_past_year`

- **概要**: 過去1年間の日付を生成する。
- **入力**: なし
- **出力**: `list` - 日付のリスト。
- **内部処理**:
  1. 現在の日本時間を取得。
  2. 過去1年間の日付リストを生成。
- **依存関係**: `utils/date_utils`

### `get_next_date_range`

- **概要**: 次のデータ範囲を決定する。
- **入力**: `config`
- **出力**: `tuple` - 日付とレコード位置。
- **内部処理**:
  1. BigQueryから進捗状況を取得。
  2. 次のデータ範囲を決定。
- **依存関係**: `bigquery`

### `get_date_range_for_fetch`

- **概要**: 日付範囲を設定する。
- **入力**:
  - `start_date_str`: `str` - 開始日付。
  - `end_date_str`: `str` - 終了日付。
- **出力**: `tuple` - 開始日付と終了日付。
- **内部処理**:
  1. 現在の日本時間を取得。
  2. 開始日と終了日を設定。
- **依存関係**: `utils/date_utils`

### `fetch_records`

- **概要**: GSCデータをフェッチする。
- **入力**:
  - `date`: `str` - データ取得対象の日付。
  - `start_record`: `int` - 取得開始位置。
  - `limit`: `int` - 取得するレコード数。
- **出力**: `tuple` - 取得したレコードリストと次のレコード位置。
- **内部処理**:
  1. APIリクエストを構築。
  2. GSCデータを取得。
- **依存関係**: `googleapiclient`

### `insert_to_bigquery`

- **概要**: GSCデータをBigQueryに挿入する。
- **入力**:
  - `records`: `list` - 取得したレコードリスト。
  - `date`: `str` - データ取得対象の日付。
- **出力**: なし
- **内部処理**:
  1. データの集計。
  2. BigQueryにデータを挿入。
- **依存関係**: `bigquery`

### `fetch_and_insert_gsc_data`

- **概要**: GSCデータを取得し、BigQueryに挿入する。
- **入力**:
  - `start_date`: `str` - 開始日付。
  - `end_date`: `str` - 終了日付。
- **出力**: なし
- **内部処理**:
  1. 指定された期間のデータを取得。
  2. データをBigQueryに挿入。
- **依存関係**: `fetch_records`, `insert_to_bigquery`

### `_handle_error`

- **概要**: 統一されたエラーハンドリングを行う。
- **入力**: `exception`
- **出力**: なし
- **内部処理**:
  1. エラーメッセージをログに記録。
- **依存関係**: なし

### `_get_bigquery_credentials`

- **概要**: BigQuery用の認証情報を取得する。
- **入力**: なし
- **出力**: `service_account.Credentials`
- **内部処理**:
  1. 認証情報ファイルのパスを取得。
  2. 認証情報を返す。
- **依存関係**: `service_account`

### `_bq_schema`

- **概要**: BigQueryテーブルスキーマを定義する。
- **入力**: なし
- **出力**: `list` - スキーマフィールドのリスト。
- **内部処理**:
  1. スキーマフィールドを定義。
- **依存関係**: `bigquery`

### `process_gsc_data`

- **概要**: GSCデータを取得し、BigQueryに保存する。
- **入力**: なし
- **出力**: なし
- **内部処理**:
  1. 日付範囲を設定。
  2. GSCデータを取得し、BigQueryに挿入。
- **依存関係**: `get_date_range_for_fetch`, `GSCConnector`

### `save_processing_position`

- **概要**: 処理位置を保存する。
- **入力**:
  - `config`: `Config`
  - `position`: `dict`
- **出力**: なし
- **内部処理**:
  1. 処理位置をBigQueryに保存。
- **依存関係**: `bigquery`

### `get_last_processed_position`

- **概要**: 最後に処理したポジションを取得する。
- **入力**: `config`: `Config`
- **出力**: `dict` - 最後に処理したポジション。
- **内部処理**:
  1. BigQueryから最後の処理位置を取得。
- **依存関係**: `bigquery`

### `get_current_jst_datetime`

- **概要**: 現在のJSTを取得する。
- **入力**: なし
- **出力**: `datetime` - 現在のJST。
- **内部処理**:
  1. 日本時間のタイムゾーンを設定。
  2. 現在の日時を取得。
- **依存関係**: `pytz`

### `format_datetime_jst`

- **概要**: JSTを指定されたフォーマットで文字列に変換する。
- **入力**:
  - `jst_datetime`: `datetime`
  - `fmt`: `str`
- **出力**: `str` - フォーマットされた日付文字列。
- **内部処理**:
  1. JSTのdatetimeオブジェクトを文字列に変換。
- **依存関係**: なし

### `set_project_root`

- **概要**: プロジェクトのルートディレクトリを設定する。
- **入力**: `path`: `Path`
- **出力**: なし
- **内部処理**:
  1. プロジェクトルートを設定。
- **依存関係**: なし

### `get_project_root`

- **概要**: プロジェクトのルートディレクトリを取得する。
- **入力**: なし
- **出力**: `Path` - プロジェクトルート。
- **内部処理**:
  1. プロジェクトルートを返す。
- **依存関係**: なし

### `load_env`

- **概要**: 環境変数をロードする。
- **入力**: `env_file`: `Optional[Path]`
- **出力**: なし
- **内部処理**:
  1. .envファイルをロード。
- **依存関係**: `dotenv`

### `get_env_var`

- **概要**: 環境変数を取得する。
- **入力**:
  - `key`: `str`
  - `default`: `Optional[Any]`
- **出力**: `Any` - 環境変数の値。
- **内部処理**:
  1. 指定されたキーの環境変数を取得。
- **依存関係**: `os`

### `get_config_file`

- **概要**: 設定ファイルのパスを取得する。
- **入力**: `file_name`: `str`
- **出力**: `Path` - 設定ファイルのパス。
- **内部処理**:
  1. 設定ファイルのパスを返す。
- **依存関係**: なし

### `get_config_value`

- **概要**: 設定ファイルから値を取得する。
- **入力**:
  - `section`: `str`
  - `key`: `str`
  - `default`: `Optional[Any]`
- **出力**: `Any` - 設定値。
- **内部処理**:
  1. 設定ファイルから値を取得。
- **依存関係**: `configparser`

### `resolve_path`

- **概要**: パスを絶対パスに変換する。
- **入力**: `path`: `str`
- **出力**: `Path` - 絶対パス。
- **内部処理**:
  1. 指定されたパスを絶対パスに変換。
- **依存関係**: `Path`

### `get_service_account_file`

- **概要**: サービスアカウントファイルのパスを取得する。
- **入力**: なし
- **出力**: `Path` - サービスアカウントファイルのパス。
- **内部処理**:
  1. サービスアカウントファイルのパスを返す。
- **依存関係**: なし

### `get_environment`

- **概要**: 環境を取得する。
- **入力**: なし
- **出力**: `str` - 環境。
- **内部処理**:
  1. 環境変数から環境を取得。
- **依存関係**: なし

### `get_openai_api_key`

- **概要**: OpenAI APIキーを取得する。
- **入力**: なし
- **出力**: `str` - APIキー。
- **内部処理**:
  1. 環境変数からAPIキーを取得。
- **依存関係**: `os`

### `get_openai_model`

- **概要**: OpenAIモデル名を取得する。
- **入力**: なし
- **出力**: `str` - モデル名。
- **内部処理**:
  1. 設定ファイルからモデル名を取得。
- **依存関係**: `configparser`

### `setup_logging`

- **概要**: ロギング設定をセットアップする。
- **入力**: なし
- **出力**: なし
- **内部処理**:
  1. ログディレクトリを作成。
  2. ログファイルとコンソールハンドラーを設定。
- **依存関係**: `logging`

### `get_logger`

- **概要**: 名前付きロガーを取得する。
- **入力**: `name`: `Optional[str]`
- **出力**: `logging.Logger`
- **内部処理**:
  1. ロギング設定を初期化。
  2. 名前付きロガーを返す。
- **依存関係**: `logging`

### `normalize_url`

- **概要**: URLを正規化する。
- **入力**: `url`: `str`
- **出力**: `str` - 正規化されたURL。
- **内部処理**:
  1. クエリパラメータとフラグメント識別子を除去。
- **依存関係**: `urlparse`

### `aggregate_records`

- **概要**: レコードを集計する。
- **入力**: `records`: `list`
- **出力**: `list` - 集計後のレコードリスト。
- **内部処理**:
  1. URLでレコードをグルーピング。
  2. クリック数、インプレッション数、平均順位を集計。
- **依存関係**: `defaultdict`

## 6. データフローとモジュール相互作用

- **入力元**:
  - `main.py`が`environment.py`から設定情報を取得。
  - `gsc_fetcher.py`がGoogle Search Console APIからデータを取得。

- **処理順序**:
  1. `main.py`が設定情報をロード。
  2. `gsc_handler.py`が日付範囲を設定。
  3. `gsc_fetcher.py`がデータを取得し、`bigquery`に挿入。
  4. `merge_files.py`がPythonファイルをマージ。

- **出力先**:
  - 取得したデータは`bigquery`に保存。
  - マージ結果は`docs/merge.txt`に保存。