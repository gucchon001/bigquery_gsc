# 機能要件仕様書

## 1. システム概要
- プログラムの全体的な目的と対象のユーザー:
  - このプログラムは、Google Search Console（GSC）からデータを取得し、BigQueryに格納することを目的としています。これにより、データ分析やレポート生成を支援します。対象ユーザーは、データエンジニアやデータアナリストで、GSCのデータを効率的に処理して活用したいと考えている人々です。

## 2. 主要機能要件
- 提供される各機能の説明:
  1. **Google Search Console データ取得**:
     - `GSCConnector`クラスを使用して、指定された日付範囲のデータをGoogle Search Consoleから取得します。
     - APIを通じて指定されたプロパティのデータをフェッチします。
  
  2. **データの集計と正規化**:
     - URLを正規化し、クエリパラメータやフラグメントを除去します。
     - 取得したデータをクリック数、インプレッション数、平均順位で集計します。
  
  3. **BigQueryへのデータ挿入**:
     - `insert_to_bigquery`メソッドを使用して、集計されたデータをBigQueryに挿入します。
     - リトライロジックを用いて、データ挿入の信頼性を向上させます。
  
  4. **設定と環境の管理**:
     - 環境変数と設定ファイル（`settings.ini`や`secrets.env`）を使用して、プログラムの動作を制御します。
     - 環境に応じた設定のロードと適用を行います。
  
  5. **ログ出力とエラーハンドリング**:
     - 詳細なログを出力し、エラーが発生した際のトラブルシューティングを支援します。
     - 各ステップでの進捗状況やエラーを記録します。

## 3. 非機能要件
- パフォーマンス:
  - データ取得と挿入は効率的に行われ、APIのレート制限を考慮して計画されています。
  - BigQueryへの挿入はバッチ処理で行い、リトライを通じて安定性を確保します。

- セキュリティ:
  - OAuth 2.0を使用してGoogle APIにアクセスします。認証情報は環境変数および設定ファイルで管理され、機密情報は.gitignoreで保護されます。

- 可用性:
  - 定期的なジョブの実行を前提として設計されており、エラー発生時には再試行を行います。

- ロギング:
  - ログファイルには詳細なデバッグ情報を含め、問題発生時の解析を容易にしています。

## 4. 技術要件
- 開発環境:
  - Python 3.8以上
  - Google Cloud SDKを使用したBigQueryアクセス
  - Google API Pythonクライアントライブラリ

- システム環境:
  - Google Cloud Platformの利用を想定（BigQueryおよびGoogle Search Consoleへのアクセス）

- 必要なライブラリ:
  - `google-cloud-bigquery`: BigQueryへのアクセス
  - `google-auth`: Google APIへのアクセス認証
  - `dotenv`: 環境変数の管理
  - `icecream`: デバッグ用のログ出力
  - `anytree`: ディレクトリ構造の可視化

以上がこのプログラムの機能要件仕様です。各機能は相互に連携し、GSCからのデータ取得から分析基盤への登録までのプロセスを自動化しています。